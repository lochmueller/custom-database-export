Index: src/Mysqldump.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Mysqldump.php b/src/Mysqldump.php
--- a/src/Mysqldump.php	
+++ b/src/Mysqldump.php	(date 1676631482873)
@@ -26,38 +26,38 @@
 class Mysqldump
 {
     // Database
-    private string $dsn;
-    private ?string $user;
-    private ?string $pass;
-    private string $host;
-    private string $dbName;
-    private PDO $conn;
-    private array $pdoOptions;
-    private CompressInterface $io;
-    private TypeAdapterInterface $db;
+    protected string $dsn;
+    protected ?string $user;
+    protected ?string $pass;
+    protected string $host;
+    protected string $dbName;
+    protected PDO $conn;
+    protected array $pdoOptions;
+    protected CompressInterface $io;
+    protected TypeAdapterInterface $db;
 
-    private static string $adapterClass = TypeAdapterMysql::class;
+    protected static string $adapterClass = TypeAdapterMysql::class;
 
-    private DumpSettings $settings;
-    private array $tableColumnTypes = [];
-    private $transformTableRowCallable;
-    private $transformColumnValueCallable;
-    private $infoCallable;
+    protected DumpSettings $settings;
+    protected array $tableColumnTypes = [];
+    protected $transformTableRowCallable;
+    protected $transformColumnValueCallable;
+    protected $infoCallable;
 
     // Internal data arrays.
-    private array $tables = [];
-    private array $views = [];
-    private array $triggers = [];
-    private array $procedures = [];
-    private array $functions = [];
-    private array $events = [];
+    protected array $tables = [];
+    protected array $views = [];
+    protected array $triggers = [];
+    protected array $procedures = [];
+    protected array $functions = [];
+    protected array $events = [];
 
     /**
      * Keyed on table name, with the value as the conditions.
      * e.g. - 'users' => 'date_registered > NOW() - INTERVAL 6 MONTH'
      */
-    private array $tableWheres = [];
-    private array $tableLimits = [];
+    protected array $tableWheres = [];
+    protected array $tableLimits = [];
 
     /**
      * Constructor of Mysqldump.
@@ -94,7 +94,7 @@
      * @param string $dsn dsn string to parse
      * @throws Exception
      */
-    private function parseDsn(string $dsn): string
+    protected function parseDsn(string $dsn): string
     {
         if (empty($dsn) || !($pos = strpos($dsn, ':'))) {
             throw new Exception('Empty DSN string');
@@ -134,7 +134,7 @@
      *
      * @throws Exception
      */
-    private function connect()
+    protected function connect()
     {
         try {
             $options = array_replace_recursive([
@@ -159,7 +159,7 @@
         return new self::$adapterClass($this->conn, $this->settings);
     }
 
-    private function write(string $data): int
+    protected function write(string $data): int
     {
         return $this->io->write($data);
     }
@@ -182,11 +182,7 @@
         // Connect to database
         $this->connect();
 
-        // Create a new compressManager to manage compressed output
-        $this->io = CompressManagerFactory::create($this->settings->getCompressMethod());
-
-        // Create output file
-        $this->io->open($destination);
+        $this->ioStart($destination);
 
         // Write some basic info to output file
         if (!$this->settings->skipComments()) {
@@ -239,6 +235,22 @@
             $this->write($this->getDumpFileFooter());
         }
 
+        $this->ioClose();
+    }
+
+    protected function ioStart(string $destination): void
+    {
+
+        // Create a new compressManager to manage compressed output
+        $this->io = CompressManagerFactory::create($this->settings->getCompressMethod());
+
+        // Create output file
+        $this->io->open($destination);
+    }
+
+    // Handle
+    protected function ioClose(): void
+    {
         // Close output file.
         $this->io->close();
     }
@@ -246,7 +258,7 @@
     /**
      * Returns header for dump file.
      */
-    private function getDumpFileHeader(): string
+    protected function getDumpFileHeader(): string
     {
         // Some info about software, source and time
         $header = sprintf(
@@ -272,7 +284,7 @@
     /**
      * Returns footer for dump file.
      */
-    private function getDumpFileFooter(): string
+    protected function getDumpFileFooter(): string
     {
         $footer = '-- Dump completed';
 
@@ -288,7 +300,7 @@
     /**
      * Reads table names from database. Fills $this->tables array so they will be dumped later.
      */
-    private function getDatabaseStructureTables()
+    protected function getDatabaseStructureTables()
     {
         $includedTables = $this->settings->getIncludedTables();
 
@@ -314,7 +326,7 @@
     /**
      * Reads view names from database. Fills $this->tables array so they will be dumped later.
      */
-    private function getDatabaseStructureViews()
+    protected function getDatabaseStructureViews()
     {
         $includedViews = $this->settings->getIncludedViews();
 
@@ -339,7 +351,7 @@
     /**
      * Reads trigger names from database. Fills $this->tables array so they will be dumped later.
      */
-    private function getDatabaseStructureTriggers()
+    protected function getDatabaseStructureTriggers()
     {
         // Listing all triggers from database
         if (!$this->settings->skipTriggers()) {
@@ -352,7 +364,7 @@
     /**
      * Reads procedure names from database. Fills $this->tables array so they will be dumped later.
      */
-    private function getDatabaseStructureProcedures()
+    protected function getDatabaseStructureProcedures()
     {
         // Listing all procedures from database
         if ($this->settings->isEnabled('routines')) {
@@ -365,7 +377,7 @@
     /**
      * Reads functions names from database. Fills $this->tables array so they will be dumped later.
      */
-    private function getDatabaseStructureFunctions()
+    protected function getDatabaseStructureFunctions()
     {
         // Listing all functions from database
         if ($this->settings->isEnabled('routines')) {
@@ -378,7 +390,7 @@
     /**
      * Reads event names from database. Fills $this->tables array so they will be dumped later.
      */
-    private function getDatabaseStructureEvents()
+    protected function getDatabaseStructureEvents()
     {
         // Listing all events from database
         if ($this->settings->isEnabled('events')) {
@@ -391,7 +403,7 @@
     /**
      * Compare if $table name matches with a definition inside $arr.
      */
-    private function matches(string $table, array $arr): bool
+    protected function matches(string $table, array $arr): bool
     {
         $match = false;
 
@@ -411,7 +423,7 @@
     /**
      * Exports all the tables selected from database
      */
-    private function exportTables()
+    protected function exportTables()
     {
         // Exporting tables one by one
         foreach ($this->tables as $table) {
@@ -435,7 +447,7 @@
     /**
      * Exports all the views found in database.
      */
-    private function exportViews()
+    protected function exportViews()
     {
         if (false === $this->settings->isEnabled('no-create-info')) {
             // Exporting views one by one
@@ -461,7 +473,7 @@
     /**
      * Exports all the triggers found in database.
      */
-    private function exportTriggers()
+    protected function exportTriggers()
     {
         foreach ($this->triggers as $trigger) {
             $this->getTriggerStructure($trigger);
@@ -471,7 +483,7 @@
     /**
      * Exports all the procedures found in database.
      */
-    private function exportProcedures()
+    protected function exportProcedures()
     {
         foreach ($this->procedures as $procedure) {
             $this->getProcedureStructure($procedure);
@@ -481,7 +493,7 @@
     /**
      * Exports all the functions found in database.
      */
-    private function exportFunctions()
+    protected function exportFunctions()
     {
         foreach ($this->functions as $function) {
             $this->getFunctionStructure($function);
@@ -492,7 +504,7 @@
      * Exports all the events found in database.
      * @throws Exception
      */
-    private function exportEvents()
+    protected function exportEvents()
     {
         foreach ($this->events as $event) {
             $this->getEventStructure($event);
@@ -504,7 +516,7 @@
      *
      * @param string $tableName Name of table to export
      */
-    private function getTableStructure(string $tableName)
+    protected function getTableStructure(string $tableName)
     {
         if (!$this->settings->isEnabled('no-create-info')) {
             $ret = '';
@@ -542,7 +554,7 @@
      * @param string $tableName Name of table to export
      * @return array type column types detailed
      */
-    private function getTableColumnTypes(string $tableName): array
+    protected function getTableColumnTypes(string $tableName): array
     {
         $columnTypes = [];
         $columns = $this->conn->query($this->db->showColumns($tableName));
@@ -567,7 +579,7 @@
      *
      * @param string $viewName Name of view to export
      */
-    private function getViewStructureTable(string $viewName)
+    protected function getViewStructureTable(string $viewName)
     {
         if (!$this->settings->skipComments()) {
             $ret = (
@@ -600,7 +612,7 @@
      * @param string $viewName Name of view to export
      * @return string create statement
      */
-    private function createStandInTable(string $viewName): string
+    protected function createStandInTable(string $viewName): string
     {
         $ret = [];
 
@@ -620,7 +632,7 @@
     /**
      * View structure extractor, create view.
      */
-    private function getViewStructureView(string $viewName)
+    protected function getViewStructureView(string $viewName)
     {
         if (!$this->settings->skipComments()) {
             $ret = sprintf(
@@ -650,7 +662,7 @@
      *
      * @param string $triggerName Name of trigger to export
      */
-    private function getTriggerStructure(string $triggerName)
+    protected function getTriggerStructure(string $triggerName)
     {
         $stmt = $this->db->showCreateTrigger($triggerName);
 
@@ -670,7 +682,7 @@
      *
      * @param string $procedureName Name of procedure to export
      */
-    private function getProcedureStructure(string $procedureName)
+    protected function getProcedureStructure(string $procedureName)
     {
         if (!$this->settings->skipComments()) {
             $ret = "--" . PHP_EOL .
@@ -693,7 +705,7 @@
      *
      * @param string $functionName Name of function to export
      */
-    private function getFunctionStructure(string $functionName)
+    protected function getFunctionStructure(string $functionName)
     {
         if (!$this->settings->skipComments()) {
             $ret = "--" . PHP_EOL .
@@ -717,7 +729,7 @@
      * @param string $eventName Name of event to export
      * @throws Exception
      */
-    private function getEventStructure(string $eventName)
+    protected function getEventStructure(string $eventName)
     {
         if (!$this->settings->skipComments()) {
             $ret = "--" . PHP_EOL .
@@ -741,7 +753,7 @@
      * @param string $tableName Name of table which contains rows
      * @param array $row Associative array of column names and values to be quoted
      */
-    private function prepareColumnValues(string $tableName, array $row): array
+    protected function prepareColumnValues(string $tableName, array $row): array
     {
         $ret = [];
         $columnTypes = $this->tableColumnTypes[$tableName];
@@ -764,7 +776,7 @@
     /**
      * Escape values with quotes when needed.
      */
-    private function escape(?string $colValue, array $colType)
+    protected function escape(?string $colValue, array $colType)
     {
         if (is_null($colValue)) {
             return 'NULL';
@@ -786,7 +798,7 @@
      *
      * @param string $tableName Name of table to export
      */
-    private function listValues(string $tableName)
+    protected function listValues(string $tableName)
     {
         $this->prepareListValues($tableName);
 
@@ -877,7 +889,7 @@
      *
      * @param string $tableName Name of table to export
      */
-    private function prepareListValues(string $tableName)
+    protected function prepareListValues(string $tableName)
     {
         if (!$this->settings->skipComments()) {
             $this->write(
@@ -916,7 +928,7 @@
      * @param string $tableName Name of table to export.
      * @param integer $count Number of rows inserted.
      */
-    private function endListValues(string $tableName, int $count = 0)
+    protected function endListValues(string $tableName, int $count = 0)
     {
         if ($this->settings->isEnabled('disable-keys')) {
             $this->write($this->db->endAddDisableKeys($tableName));
@@ -985,7 +997,7 @@
      *
      * @return array columns for sql sentence for insert
      */
-    private function getColumnNames(string $tableName): array
+    protected function getColumnNames(string $tableName): array
     {
         $colNames = [];
 
